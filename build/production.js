!function(e){function n(e){var n=require("./"+e+"."+t+".hot-update.js");!function(e,n){if(!x[e]||!y[e])return;for(var o in y[e]=!1,n)Object.prototype.hasOwnProperty.call(n,o)&&(f[o]=n[o]);0==--g&&0===v&&O()}(n.id,n.modules)}var o,r=!0,t="cb2d1bf8a574dd6a5133",i={},c=[],s=[];function d(e){var n=H[e];if(!n)return D;var r=function(r){return n.hot.active?(H[r]?-1===H[r].parents.indexOf(e)&&H[r].parents.push(e):(c=[e],o=r),-1===n.children.indexOf(r)&&n.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+e),c=[]),D(r)},t=function(e){return{configurable:!0,enumerable:!0,get:function(){return D[e]},set:function(n){D[e]=n}}};for(var i in D)Object.prototype.hasOwnProperty.call(D,i)&&"e"!==i&&Object.defineProperty(r,i,t(i));return r.e=function(e){return"ready"===p&&l("prepare"),v++,D.e(e).then(n,function(e){throw n(),e});function n(){v--,"prepare"===p&&(m[e]||j(e),0===v&&0===g&&O())}},r}var a=[],p="idle";function l(e){p=e;for(var n=0;n<a.length;n++)a[n].call(null,e)}var u,f,h,g=0,v=0,m={},y={},x={};function b(e){return+e+""===e?+e:e}function w(e){if("idle"!==p)throw new Error("check() is only allowed in idle status");return r=e,l("check"),function(){try{var e=require("./"+t+".hot-update.json")}catch(e){return Promise.resolve()}return Promise.resolve(e)}().then(function(e){if(!e)return l("idle"),null;y={},m={},x=e.c,h=e.h,l("prepare");var n=new Promise(function(e,n){u={resolve:e,reject:n}});f={};return j(0),"prepare"===p&&0===v&&0===g&&O(),n})}function j(e){x[e]?(y[e]=!0,g++,n(e)):m[e]=!0}function O(){l("ready");var e=u;if(u=null,e)if(r)Promise.resolve().then(function(){return _(r)}).then(function(n){e.resolve(n)},function(n){e.reject(n)});else{var n=[];for(var o in f)Object.prototype.hasOwnProperty.call(f,o)&&n.push(b(o));e.resolve(n)}}function _(n){if("ready"!==p)throw new Error("apply() is only allowed in ready status");var o,r,s,d,a;function u(e){for(var n=[e],o={},r=n.slice().map(function(e){return{chain:[e],id:e}});r.length>0;){var t=r.pop(),i=t.id,c=t.chain;if((d=H[i])&&!d.hot._selfAccepted){if(d.hot._selfDeclined)return{type:"self-declined",chain:c,moduleId:i};if(d.hot._main)return{type:"unaccepted",chain:c,moduleId:i};for(var s=0;s<d.parents.length;s++){var a=d.parents[s],p=H[a];if(p){if(p.hot._declinedDependencies[i])return{type:"declined",chain:c.concat([a]),moduleId:i,parentId:a};-1===n.indexOf(a)&&(p.hot._acceptedDependencies[i]?(o[a]||(o[a]=[]),g(o[a],[i])):(delete o[a],n.push(a),r.push({chain:c.concat([a]),id:a})))}}}}return{type:"accepted",moduleId:e,outdatedModules:n,outdatedDependencies:o}}function g(e,n){for(var o=0;o<n.length;o++){var r=n[o];-1===e.indexOf(r)&&e.push(r)}}n=n||{};var v={},m=[],y={},w=function(){console.warn("[HMR] unexpected require("+O.moduleId+") to disposed module")};for(var j in f)if(Object.prototype.hasOwnProperty.call(f,j)){var O;a=b(j);var _=!1,k=!1,P=!1,E="";switch((O=f[j]?u(a):{type:"disposed",moduleId:j}).chain&&(E="\nUpdate propagation: "+O.chain.join(" -> ")),O.type){case"self-declined":n.onDeclined&&n.onDeclined(O),n.ignoreDeclined||(_=new Error("Aborted because of self decline: "+O.moduleId+E));break;case"declined":n.onDeclined&&n.onDeclined(O),n.ignoreDeclined||(_=new Error("Aborted because of declined dependency: "+O.moduleId+" in "+O.parentId+E));break;case"unaccepted":n.onUnaccepted&&n.onUnaccepted(O),n.ignoreUnaccepted||(_=new Error("Aborted because "+a+" is not accepted"+E));break;case"accepted":n.onAccepted&&n.onAccepted(O),k=!0;break;case"disposed":n.onDisposed&&n.onDisposed(O),P=!0;break;default:throw new Error("Unexception type "+O.type)}if(_)return l("abort"),Promise.reject(_);if(k)for(a in y[a]=f[a],g(m,O.outdatedModules),O.outdatedDependencies)Object.prototype.hasOwnProperty.call(O.outdatedDependencies,a)&&(v[a]||(v[a]=[]),g(v[a],O.outdatedDependencies[a]));P&&(g(m,[O.moduleId]),y[a]=w)}var M,q=[];for(r=0;r<m.length;r++)a=m[r],H[a]&&H[a].hot._selfAccepted&&q.push({module:a,errorHandler:H[a].hot._selfAccepted});l("dispose"),Object.keys(x).forEach(function(e){!1===x[e]&&function(e){delete installedChunks[e]}(e)});for(var I,R,A=m.slice();A.length>0;)if(a=A.pop(),d=H[a]){var U={},C=d.hot._disposeHandlers;for(s=0;s<C.length;s++)(o=C[s])(U);for(i[a]=U,d.hot.active=!1,delete H[a],delete v[a],s=0;s<d.children.length;s++){var N=H[d.children[s]];N&&((M=N.parents.indexOf(a))>=0&&N.parents.splice(M,1))}}for(a in v)if(Object.prototype.hasOwnProperty.call(v,a)&&(d=H[a]))for(R=v[a],s=0;s<R.length;s++)I=R[s],(M=d.children.indexOf(I))>=0&&d.children.splice(M,1);for(a in l("apply"),t=h,y)Object.prototype.hasOwnProperty.call(y,a)&&(e[a]=y[a]);var T=null;for(a in v)if(Object.prototype.hasOwnProperty.call(v,a)&&(d=H[a])){R=v[a];var L=[];for(r=0;r<R.length;r++)if(I=R[r],o=d.hot._acceptedDependencies[I]){if(-1!==L.indexOf(o))continue;L.push(o)}for(r=0;r<L.length;r++){o=L[r];try{o(R)}catch(e){n.onErrored&&n.onErrored({type:"accept-errored",moduleId:a,dependencyId:R[r],error:e}),n.ignoreErrored||T||(T=e)}}}for(r=0;r<q.length;r++){var S=q[r];a=S.module,c=[a];try{D(a)}catch(e){if("function"==typeof S.errorHandler)try{S.errorHandler(e)}catch(o){n.onErrored&&n.onErrored({type:"self-accept-error-handler-errored",moduleId:a,error:o,originalError:e}),n.ignoreErrored||T||(T=o),T||(T=e)}else n.onErrored&&n.onErrored({type:"self-accept-errored",moduleId:a,error:e}),n.ignoreErrored||T||(T=e)}}return T?(l("fail"),Promise.reject(T)):(l("idle"),new Promise(function(e){e(m)}))}var H={};function D(n){if(H[n])return H[n].exports;var r=H[n]={i:n,l:!1,exports:{},hot:function(e){var n={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:o!==e,active:!0,accept:function(e,o){if(void 0===e)n._selfAccepted=!0;else if("function"==typeof e)n._selfAccepted=e;else if("object"==typeof e)for(var r=0;r<e.length;r++)n._acceptedDependencies[e[r]]=o||function(){};else n._acceptedDependencies[e]=o||function(){}},decline:function(e){if(void 0===e)n._selfDeclined=!0;else if("object"==typeof e)for(var o=0;o<e.length;o++)n._declinedDependencies[e[o]]=!0;else n._declinedDependencies[e]=!0},dispose:function(e){n._disposeHandlers.push(e)},addDisposeHandler:function(e){n._disposeHandlers.push(e)},removeDisposeHandler:function(e){var o=n._disposeHandlers.indexOf(e);o>=0&&n._disposeHandlers.splice(o,1)},check:w,apply:_,status:function(e){if(!e)return p;a.push(e)},addStatusHandler:function(e){a.push(e)},removeStatusHandler:function(e){var n=a.indexOf(e);n>=0&&a.splice(n,1)},data:i[e]};return o=void 0,n}(n),parents:(s=c,c=[],s),children:[]};return e[n].call(r.exports,r,r.exports,d(n)),r.l=!0,r.exports}D.m=e,D.c=H,D.d=function(e,n,o){D.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:o})},D.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},D.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return D.d(n,"a",n),n},D.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},D.p="",D.w={},D.h=function(){return t},d(0)(D.s=0)}({"./app.js":function(e,n,o){"use strict";o.r(n);var r=o("express"),t=o("express-session"),i=(o("mongoose"),o("connect-mongo")(t),o("path")),c=(o("cookie-parser"),o("body-parser")),s=(o("passport"),o("es6-promisify"),o("connect-flash"),o("express-validator"),o("./helpers.js"),i.join(__dirname,"../client","build"));console.log(s);var d=r();d.use(c.json()),console.log("NOW IN PRODUCTION"),d.use(r.static(s)),d.get("/api",function(e,n){n.json({msg:"node and express"})}),d.get("*",function(e,n){n.sendFile(i.join(s+"/index.html"))}),n.default=d},"./helpers.js":function(e,n){},"./node_modules/webpack/hot/log-apply-result.js":function(e,n,o){e.exports=function(e,n){var r=e.filter(function(e){return n&&n.indexOf(e)<0}),t=o("./node_modules/webpack/hot/log.js");(r.length>0&&(t("warning","[HMR] The following modules couldn't be hot updated: (They would need a full reload!)"),r.forEach(function(e){t("warning","[HMR]  - "+e)})),n&&0!==n.length)?(t("info","[HMR] Updated modules:"),n.forEach(function(e){if("string"==typeof e&&-1!==e.indexOf("!")){var n=e.split("!");t.groupCollapsed("info","[HMR]  - "+n.pop()),t("info","[HMR]  - "+e),t.groupEnd("info")}else t("info","[HMR]  - "+e)}),n.every(function(e){return"number"==typeof e})&&t("info","[HMR] Consider using the NamedModulesPlugin for module names.")):t("info","[HMR] Nothing hot updated.")}},"./node_modules/webpack/hot/log.js":function(e,n){var o="info";function r(){}function t(e){return"info"===o&&"info"===e||["info","warning"].indexOf(o)>=0&&"warning"===e||["info","warning","error"].indexOf(o)>=0&&"error"===e}function i(e){return function(n,o){t(n)&&e(o)}}e.exports=function(e,n){t(e)&&("info"===e?console.log(n):"warning"===e?console.warn(n):"error"===e&&console.error(n))};var c=console.group||r,s=console.groupCollapsed||r,d=console.groupEnd||r;e.exports.group=i(c),e.exports.groupCollapsed=i(s),e.exports.groupEnd=i(d),e.exports.setLogLevel=function(e){o=e}},"./node_modules/webpack/hot/poll.js?1000":function(e,n,o){(function(n){var r=+n.substr(1)||6e5,t=o("./node_modules/webpack/hot/log.js");setInterval(function n(r){"idle"===e.hot.status()&&e.hot.check(!0).then(function(e){e?(o("./node_modules/webpack/hot/log-apply-result.js")(e,e),n(!0)):r&&t("info","[HMR] Update applied.")}).catch(function(n){var o=e.hot.status();["abort","fail"].indexOf(o)>=0?(t("warning","[HMR] Cannot apply update."),t("warning","[HMR] "+n.stack||n.message),t("warning","[HMR] You need to restart the application!")):t("warning","[HMR] Update failed: "+n.stack||n.message)})},r)}).call(this,"?1000")},"./start.js":function(e,n,o){"use strict";o.r(n);var r=o("./app.js"),t=o("mongoose"),i=o("http");t.connect("mongodb://admin:admin@ds227469.mlab.com:27469/node"),t.connection.on("error",function(e){console.log(e)});var c=i.createServer(r.default),s=r.default;c.listen(process.env.PORT||8080,function(){console.log("app running on port "+process.env.PORT+" ")}),e.hot.accept("./app.js",function(e){r=o("./app.js"),c.removeListener("request",s),c.on("request",r.default),s=r.default})},0:function(e,n,o){o("./node_modules/webpack/hot/poll.js?1000"),e.exports=o("./start.js")},"body-parser":function(e,n){e.exports=require("body-parser")},"connect-flash":function(e,n){e.exports=require("connect-flash")},"connect-mongo":function(e,n){e.exports=require("connect-mongo")},"cookie-parser":function(e,n){e.exports=require("cookie-parser")},"es6-promisify":function(e,n){e.exports=require("es6-promisify")},express:function(e,n){e.exports=require("express")},"express-session":function(e,n){e.exports=require("express-session")},"express-validator":function(e,n){e.exports=require("express-validator")},http:function(e,n){e.exports=require("http")},mongoose:function(e,n){e.exports=require("mongoose")},passport:function(e,n){e.exports=require("passport")},path:function(e,n){e.exports=require("path")}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,